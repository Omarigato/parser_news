#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ g4f
–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º: –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Ä–µ–∫–ª–∞–º–∞, –ò–ò, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
"""

import g4f
import re
from datetime import datetime
from typing import List, Dict


class NewsParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é g4f"""
    
    def __init__(self):
        self.topics = [
            "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", 
            "—Ä–µ–∫–ª–∞–º–∞",
            "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
        ]
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        self.news_prompt = (
            "–°–æ—Å—Ç–∞–≤—å —Å–≤–µ–∂—É—é –∏ —Å–∂–∞—Ç—É—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π (5‚Äì7 —à—Ç—É–∫) "
            "–ø–æ —Ç–µ–º–∞–º: –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Ä–µ–∫–ª–∞–º–∞, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏. "
            "–£–ø–æ–º–∏–Ω–∞–π —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è. –ë–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã. "
            "–î–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏ —É–∫–∞–∂–∏:\n"
            "1. –ó–∞–≥–æ–ª–æ–≤–æ–∫\n"
            "2. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n"
            "3. –î–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
            "4. –ò—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–∑–≤–∞–Ω–∏–µ)\n"
            "5. –°—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª\n\n"
            "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:\n"
            "üì∞ –ó–ê–ì–û–õ–û–í–û–ö\n"
            "üìù –û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "üìÖ –î–∞—Ç–∞: [–¥–∞—Ç–∞]\n"
            "üì¢ –ò—Å—Ç–æ—á–Ω–∏–∫: [–Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞]\n"
            "üîó –°—Å—ã–ª–∫–∞: [—Å—Å—ã–ª–∫–∞]\n"
            "---\n"
        )
        
        # –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ò–ò
        self.bot_style = (
            "–¢—ã ‚Äî –ò–ò-–∂—É—Ä–Ω–∞–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É –∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã. "
            "–û—Ç–≤–µ—á–∞–π –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ. –ù–µ —É–∫–∞–∑—ã–≤–∞–π –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å—Å—ã–ª–∫–∏. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é."
        )
    
    def filter_advertisements(self, response_text: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        unwanted_phrases = [
            "Generated by BLACKBOX.AI",
            "try unlimited chat https://www.blackbox.ai",
            "Generated by AI",
            "Powered by AI",
            "Created with AI",
            "Disclaimer:",
            "Note: This content",
            "Please note:",
            "AI-generated content"
        ]
        
        for phrase in unwanted_phrases:
            response_text = response_text.replace(phrase, "")
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        response_text = re.sub(r'\n\s*\n\s*\n', '\n\n', response_text)
        return response_text.strip()
    
    def get_news_response(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç g4f —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
        messages = [
            {"role": "system", "content": self.bot_style},
            {"role": "user", "content": self.news_prompt}
        ]
        
        try:
            response = g4f.ChatCompletion.create(
                model=g4f.models.gpt_4,
                messages=messages,
                stream=False,
                timeout=30
            )
            return self.filter_advertisements(response)
        
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"
    
    def parse_news_structure(self, news_text: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        news_items = []
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
        sections = news_text.split('---')
        
        for section in sections:
            if not section.strip():
                continue
                
            news_item = {}
            lines = section.strip().split('\n')
            
            for line in lines:
                line = line.strip()
                if line.startswith('üì∞'):
                    news_item['title'] = line[1:].strip()
                elif line.startswith('üìù'):
                    news_item['description'] = line[1:].strip()
                elif line.startswith('üìÖ'):
                    news_item['date'] = line[1:].strip().replace('–î–∞—Ç–∞:', '').strip()
                elif line.startswith('üì¢'):
                    news_item['source'] = line[1:].strip().replace('–ò—Å—Ç–æ—á–Ω–∏–∫:', '').strip()
                elif line.startswith('üîó'):
                    news_item['link'] = line[1:].strip().replace('–°—Å—ã–ª–∫–∞:', '').strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if news_item.get('title'):
                news_items.append(news_item)
        
        return news_items
    
    def display_news(self, news_items: List[Dict]):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not news_items:
            print("[–û–®–ò–ë–ö–ê] –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("=" * 80)
        print("–ù–û–í–û–°–¢–ò")
        print("=" * 80)
        print(f"–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
        print(f"–¢–µ–º—ã: {', '.join(self.topics)}")
        print("=" * 80)
        
        for i, news in enumerate(news_items, 1):
            print(f"\n–ù–û–í–û–°–¢–¨ {i}")
            print("-" * 50)
            
            if news.get('title'):
                print(f"–ó–ê–ì–û–õ–û–í–û–ö: {news['title']}")
            
            if news.get('description'):
                print(f"–û–ü–ò–°–ê–ù–ò–ï: {news['description']}")
            
            if news.get('date'):
                print(f"–î–ê–¢–ê: {news['date']}")
            
            if news.get('source'):
                print(f"–ò–°–¢–û–ß–ù–ò–ö: {news['source']}")
            
            if news.get('link'):
                print(f"–°–°–´–õ–ö–ê: {news['link']}")
            
            print("-" * 50)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        print("[–ó–ê–ü–£–°–ö] –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π...")
        print("[–û–ñ–ò–î–ê–ù–ò–ï] –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        news_response = self.get_news_response()
        
        if "–û—à–∏–±–∫–∞" in news_response:
            print(f"[–û–®–ò–ë–ö–ê] {news_response}")
            return
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        news_items = self.parse_news_structure(news_response)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if news_items:
            self.display_news(news_items)
        else:
            print("\n–°–´–†–´–ï –ù–û–í–û–°–¢–ò (–±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è):")
            print("-" * 50)
            print(news_response)
            print("-" * 50)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        parser = NewsParser()
        parser.run()
    except KeyboardInterrupt:
        print("\n\n[–û–°–¢–ê–ù–û–í–õ–ï–ù–û] –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n[–û–®–ò–ë–ö–ê] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    main()
